new_data_edit <- all_data
activity_id_char <- as.character(activity_id)
results <- character(nrow(new_data_edit))
for (activity in activity_id_char) {
results[grepl(activity, new_data_edit$iati_identifier)] <- paste0(results[grepl(activity, new_data_edit$iati_identifier)], activity, collapse = NULL)
}
new_data_edit$RED_activity <- results
length(unique(new_data_edit$RED_activity))
activity_id_char[!activity_id_char %in% unique(new_data_edit$RED_activity)]
# Some leftovers that don't seem to get picked up by my API query - shame! will have to run a separate one with these. solved for this exercise but not long term (or modari potentially)
leftovers <- activity_id_char[!activity_id_char %in% unique(new_data_edit$RED_activity)]
iati_id_leftovers <- paste0(UK_code,leftovers)
iati_id_leftovers
unique(new_data_edit$RED_activity)
# Subset the RED activities
new_data_edit_red <- new_data_edit[new_data_edit$RED_activity != 0,]
View(new_data_edit_red)
# Subset the RED activities
new_data_edit_red <- new_data_edit[new_data_edit$RED_activity != "",]
View(new_data_edit_red)
unique(new_data_edit_red$RED_activity)
length(unique(new_data_edit_red$RED_activity))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(iati_id_leftovers),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
make_qstring(iati_id_leftovers)
make_qstring <- function(iati_name) {
a <- sapply(iati_name, function(x){
paste0("%22",x,"%22")
})
paste0("q=iati_identifier:(",paste(a, collapse = " "),")")
}
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(iati_id_leftovers),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
iati_id_leftovers
View(new_data)
View(new_data)
leftovers
activity_id_char <- as.character(leftovers)
results <- character(nrow(new_data))
for (activity in activity_id_char) {
results[grepl(activity, new_data$iati_identifier)] <- paste0(results[grepl(activity, new_data$iati_identifier)], activity, collapse = NULL)
}
new_data$RED_activity <- results
length(unique(new_data$RED_activity))
unique(new_data$RED_activity)
leftovers2 <- activity_id_char[!activity_id_char %in% unique(new_data$RED_activity)]
leftovers2
activity_id_char
leftovers2
View(bind_data_list)
make_qstring(iati_id_leftovers)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(iati_id_leftovers),
'q=iati_identifier:"GB-GOV-1-205219"',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(iati_id_leftovers),
'q=iati_identifier:"205219"',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
View(new_data)
View(make_qstring)
#iati_id_leftovers <- paste0(UK_code,leftovers)
make_qstring(activity_id_char)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(activity_id_char),
#'q=iati_identifier:"205219"',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
View(new_data)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:("205219" "300123")',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
#iati_id_leftovers <- paste0(UK_code,leftovers)
make_qstring(activity_id_char)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22205219%22 %22300123%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
q=iati_identifier:(%22205219%22 %22300123%22)
"q=iati_identifier:(%22205219%22 %22300123%22)"
#this grabs the participating organisations for the RED progs (might not be all the RED progs if the identifier is different, e.g. GB-GOV-GB-1, the old identifier)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(activity_id_char),
#'q=iati_identifier:(%22205219%22 %22300123%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
View(new_data)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22205219%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
new_data$RED_activity <- "205219"
new_data <- new_data[new_data$iati_identifier %in% grepl("GB-GOV-1|GB-1",new_data$iati_identifier),]
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22205219%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22GB-1-205219%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
# Adding in the RED prog ID
new_data$RED_activity <- "205219"
RED_data <- rbind(new_data_edit_red, new_data)
View(RED_data)
unique(RED_data$RED_activity)
length(unique(RED_data$RED_activity))
length(activity_id_char)
#activity_id <- c("300482")
#activity_id_a <- c("300482","300405")
activity_id <- unique(c(REDprogs$Programme.ID))
activity_id
length(unique(activity_id))
length(activity_id)
activity_id_char <- as.character(activity_id)
length(activity_id_char)
org_activity_extract <- function(page, org_code) {
rows = 1000
start <- (page - 1) * rows
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=reporting_org_ref:"',
org_code,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
message(request$status_code)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
if(start >= numb_data){
return(NULL)
}
return(new_data)
}
page_list <- list()
page <- 1
page_df = data.frame()
while (!is.null(page_df)) {
Sys.sleep(1)
message(page)
page_df <- org_activity_extract(page, "GB-GOV-1")
if(!is.null(page_df)){
page_list[[page]] = page_df
}
page = page + 1
}
all_data = rbindlist(page_list, fill=T)
new_data_edit <- all_data
results <- character(nrow(new_data_edit))
for (activity in activity_id_char) {
results[grepl(activity, new_data_edit$iati_identifier)] <- paste0(results[grepl(activity, new_data_edit$iati_identifier)], activity, collapse = NULL)
}
new_data_edit$RED_activity <- results
length(unique(new_data_edit$RED_activity))
# Subset the RED activities
new_data_edit_red <- new_data_edit[new_data_edit$RED_activity != "",]
leftovers <- activity_id_char[!activity_id_char %in% unique(new_data_edit$RED_activity)]
leftovers
length(leftovers)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22GB-1-205219%22 %22204867%22 %22204931%22 %22205053%22 %22205121%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
View(new_data)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22GB-1-205219%22 %22GB-1-204867%22 %22GB-1-204931%22 %22GB-1-205053%22 %22GB-1-205121%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
leftovers
results <- character(nrow(new_data))
for (activity in leftovers) {
results[grepl(activity, new_data$iati_identifier)] <- paste0(results[grepl(activity, new_data$iati_identifier)], activity, collapse = NULL)
}
new_data$RED_activity <- results
View(new_data)
unique(new_data_edit$RED_activity)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22GB-1-204867%22 %22GB-1-204931%22 %22GB-1-205053%22 %22GB-1-205121%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
results <- character(nrow(new_data))
for (activity in leftovers) {
results[grepl(activity, new_data$iati_identifier)] <- paste0(results[grepl(activity, new_data$iati_identifier)], activity, collapse = NULL)
}
new_data$RED_activity <- results
RED_data <- rbind(new_data_edit_red, new_data)
names(new_data_edit_red)
names(new_data)
new_data <- new_data %>% !select(participating_org_crs_channel_code,participating_org_narrative_xml_lang)
new_data <- new_data %>% select(!participating_org_crs_channel_code,participating_org_narrative_xml_lang)
View(new_data)
new_data <- new_data %>% select(!c(participating_org_crs_channel_code,participating_org_narrative_xml_lang))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
#make_qstring(activity_id_char),
'q=iati_identifier:(%22GB-1-204867%22 %22GB-1-204931%22 %22GB-1-205053%22 %22GB-1-205121%22)',
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,participating_org*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
# This is now matching up (using grepl) the leftover RED prog IDs, because the API loses this (they are buried in the iati_identifier)
results <- character(nrow(new_data))
for (activity in leftovers) {
results[grepl(activity, new_data$iati_identifier)] <- paste0(results[grepl(activity, new_data$iati_identifier)], activity, collapse = NULL)
}
new_data$RED_activity <- results
new_data <- new_data %>% select(!c(participating_org_crs_channel_code,participating_org_narrative_xml_lang))
RED_data <- rbind(new_data_edit_red, new_data)
unique(RED_data$RED_activity)
saveRDS(RED_data, file = "Outputs/RED_data_funder_060423.rds")
partner_orgs <- c(unlist(RED_data$participating_org_ref))
partner_orgs <- unique(partner_orgs)
partner_orgs
partner_orgs <- gsub("GB-GOV-1","", partner_orgs)
partner_orgs <- gsub("46004","XM-DAC-46004", partner_orgs)
partner_orgs <- gsub("41122","XM-DAC-41122", partner_orgs)
partner_orgs <- unique(partner_orgs)
partner_orgs <- partner_orgs[nzchar(partner_orgs)]
make_qstring <- function(iati_name) {
a <- sapply(iati_name, function(x){
paste0("%22",x,"%22")
})
paste0("q=reporting_org_ref:(",paste(a, collapse = " "),")")
}
make_qstring(partner_orgs)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(partner_orgs),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,description*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
#new_data <- response$response$docs
numb_data <- response$response$numFound
data_list <- list()
numb_list <- numeric()
for(i in partner_orgs){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=10',
'&wt=json',
"&fl=iati_identifier,other_identifier*,activity_date*,reporting_org*,hierarchy*, sector_code*,title*,description*,recipient_country_code,default_flow_type*,policy_marker*,transaction*,budget*,location*,activity_status*,participating_org*,related_activity*,tag*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
num <- response$response$numFound
numb_list <- c(numb_list, ifelse(length(num)==0, NA, num))
}
combined_data <- bind_rows(data_list)
View(combined_data)
length(unique(combined_data$reporting_org_ref))
View(RED_data)
my_func <- function(id, x, y) {
data.frame(id = id, result = paste(x, y, sep = ";"))
}
result <- mapply(my_func, RED_data$iati_identifier, RED_data$participating_org_ref, RED_data$participating_org_narrative, SIMPLIFY = FALSE)
result_df <- do.call(rbind, result)
# this produces a data frame for IATI ref and narrative
result_df <- separate(result_df, col = "result", into = c("org_ref","org_narrative"), sep = ";")
View(result_df)
activity_id_char
length(activity_id_char)
activity_id_char <- as.character(activity_id)
results <- character(nrow(result_df))
for (activity in activity_id_char) {
results[grepl(activity, result_df$id)] <- paste0(results[grepl(activity, result_df$id)], activity, collapse = NULL)
}
result_df$prog_no <- results
# Total number of RED programmes
length(activity_id_char)#111
# Comparing the list of programmes that have a delivery name/ID on IATI, versus the list of programmes RED sent me
# Programmes with partner named on IATI
length(unique(result_df$prog_no))#60
# Programmes with no partner on IATI
length(activity_id_char[!activity_id_char %in% unique(result_df$prog_no)])#51
View(result_df)
partner_orgs <- c(unlist(RED_data$participating_org_ref))
unique(partner_orgs)
partner_orgs <- unique(partner_orgs)
partner_orgs <- gsub("GB-GOV-1","", partner_orgs)
partner_orgs <- gsub("46004","XM-DAC-46004", partner_orgs)
partner_orgs <- gsub("41122","XM-DAC-41122", partner_orgs)
partner_orgs <- unique(partner_orgs)
partner_orgs <- partner_orgs[nzchar(partner_orgs)]
make_qstring <- function(iati_name) {
a <- sapply(iati_name, function(x){
paste0("%22",x,"%22")
})
paste0("q=reporting_org_ref:(",paste(a, collapse = " "),")")
}
data_list <- list()
numb_list <- numeric()
for(i in partner_orgs){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=10',
'&wt=json',
"&fl=iati_identifier,other_identifier*,activity_date*,reporting_org*,hierarchy*, sector_code*,title*,description*,recipient_country_code,default_flow_type*,policy_marker*,transaction*,budget*,location*,activity_status*,participating_org*,related_activity*,tag*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
num <- response$response$numFound
numb_list <- c(numb_list, ifelse(length(num)==0, NA, num))
}
combined_data <- bind_rows(data_list)
View(combined_data)
unique(combined_data$reporting_org_ref)
unique(partner_orgs)
partner_orgs
# Partners not reporting to IATI
non_reporters <- partner_orgs[!partner_orgs %in% c(unique(combined_data$reporting_org_ref)),]
# Partners not reporting to IATI
non_reporters <- partner_orgs[!partner_orgs %in% c(unique(combined_data$reporting_org_ref))]
non_reporters
39+66
# Unlist activity title and description
RED_list_unnest_1 <- combined_data %>%
# title
unnest(cols = title_narrative) %>%
# description
unnest(cols = description_narrative) %>%
select(reporting_org_ref, title_narrative, description_narrative) %>%
unique()
View(RED_list_unnest_1)
unique(combined_data$title_narrative)
# Unlist recipient countries
RED_list_unnest_2 <- combined_data %>%
# title
unnest(cols = recipient_country_code)  %>%
select(reporting_org_ref, recipient_country_code) %>%
unique() %>%
group_by(reporting_org_ref) %>%
summarise(recipient_country = paste(coalesce(recipient_country_code, ""), collapse = ", ")) %>%
ungroup()
unique(combined_data$recipient_country_code)
# Unlist activity title and description
RED_list_unnest_1 <- combined_data %>%
select(reporting_org_ref, title_narrative, description_narrative)
View(RED_list_unnest_1)
View(RED_list_unnest_1)
RED_list_unnest_1[RED_list_unnest_1$title_narrative==NULL,]
RED_list_unnest_1[RED_list_unnest_1$title_narrative=="Road Asset Management Project",]
RED_list_unnest_1[RED_list_unnest_1$description_narrative==NULL,]
RED_list_YN_1 <- data.frame(reporting_org_ref = RED_list_unnest_1$reporting_org_ref,title = "Y",description = "Y")
View(RED_list_YN_1)
RED_list_YN_1 <- RED_list_YN_1 %>% distinct(reporting_org_ref, .keep_all=TRUE)
View(RED_list_YN_1)
# Unlist recipient countries
RED_list_unnest_2 <- combined_data %>%
# title
unnest(cols = recipient_country_code)  %>%
select(reporting_org_ref, recipient_country_code) %>%
unique() %>%
group_by(reporting_org_ref) %>%
summarise(recipient_country = paste(coalesce(recipient_country_code, ""), collapse = ", ")) %>%
ungroup()
View(RED_list_unnest_2)
RED_list_YN_2 <- data.frame(reporting_org_ref = RED_list_unnest_2$reporting_org_ref,country = "Y")
# Unlist participating org
RED_list_unnest_3 <- combined_data %>%
# title
unnest(cols = participating_org_narrative)  %>%
select(reporting_org_ref, participating_org_narrative) %>%
unique() %>%
group_by(reporting_org_ref) %>%
summarise(participating_org_narrative = paste(coalesce(participating_org_narrative, ""), collapse = ", ")) %>%
ungroup()
View(RED_list_unnest_3)
RED_list_YN_3 <- data.frame(reporting_org_ref = RED_list_unnest_3$reporting_org_ref,participating_orgs = "Y")
# Unlist budget
RED_list_unnest_4 <- combined_data %>%
# title
unnest(cols = budget_value)  %>%
select(reporting_org_ref,
budget_status,
budget_value,
budget_value_currency,
budget_period_start_iso_date,
budget_period_end_iso_date) %>%
group_by(reporting_org_ref)
View(RED_list_unnest_4)
RED_list_unnest_4[RED_list_unnest_4$budget_value == NULL]
RED_list_unnest_4[RED_list_unnest_4$budget_value == NULL,]
RED_list_unnest_4[RED_list_unnest_4$budget_value == 53244,]
RED_list_unnest_4[RED_list_unnest_4$budget_value == 0,]
RED_list_unnest_4[RED_list_unnest_4$budget_period_start_iso_date == 0,]
RED_list_unnest_4[RED_list_unnest_4$budget_period_start_iso_date == "",]
RED_list_unnest_4[RED_list_unnest_4$budget_period_start_iso_date == "NULL",]
RED_list_unnest_4[RED_list_unnest_4$budget_period_start_iso_date == NULL,]
RED_list_unnest_4_sum <- RED_list_unnest_4 %>% group_by(reporting_org_ref) %>% summarise(budget = sum(budget_value))
View(RED_list_unnest_4_sum)
unique(RED_list_unnest_4_sum)
RED_list_unnest_4_sum[RED_list_unnest_4_sum$budget=="0",]
length(unique(RED_list_unnest_4$reporting_org_ref))
length(RED_list_unnest_4_sum)
nrow(RED_list_unnest_4_sum)
RED_list_YN_4 <- data.frame(reporting_org_ref = unique(RED_list_unnest_4$reporting_org_ref),budget = "Y",start_date = "Y",end_date = "Y")
RED_list_YN_4 <- data.frame(reporting_org_ref = unique(RED_list_unnest_4$reporting_org_ref),budget = "Y",budget_start = "Y",budget_end = "Y")
View(RED_list_unnest_3)
View(combined_data)
View(combined_data)
make_qstring(partner_orgs)
