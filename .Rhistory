'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
View(new_data)
iati_id[1]
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:("GB-GOV-1-300482" "GB-GOV-1-300405")',
'&rows=100',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$numFound
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:("GB-GOV-1-300482" "GB-GOV-1-300405")',
'&rows=100',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
View(new_data)
iati_id[1]
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:("GB-GOV-1-201880" "GB-GOV-1-300405")',
'&rows=100',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
View(new_data)
new_data <- response$response$numFound
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:("GB-GOV-1-201880")',
'&rows=100',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
new_data <- response$response$numFound
iati_id
data_list <- list()
View(data_list)
numb_list <- numeric()
make_qstring(iati_id[1])
for(i in iati_id[1:2]){
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, response$response$docs)
numb_list <- c(numb_list, response$response$numFound)
}
data_list
numb_list
?c
data_list <- list()
numb_list <- numeric()
for(i in iati_id[1:2]){
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
numb_list <- c(numb_list, response$response$numFound)
}
numb_list
data_list
data_list <- list()
numb_list <- numeric()
for(i in iati_id){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
numb_list <- c(numb_list, response$response$numFound)
}
numb_list <- numeric()
data_list <- list()
numb_list <- numeric()
for(i in iati_id){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
numb_list <- c(numb_list, response$response$numFound)
}
print(numb_list)
numb_list
data_list <- list()
numb_list <- numeric()
for(i in iati_id){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
numb_list <- c(numb_list, response$response$numFound)
}
numb_list
hist(numb_list)
table(numb_list)
iati_id[numb_list!=0]
View(data_list)
data_list[numb_list!=0]
numb_list
data_list[107]
data_list[[107]]
length(data_list)
length(numb_list)
data_list <- list()
numb_list <- numeric()
for(i in iati_id){
print(paste0("Processing ", i))
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(i),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
data_list <- c(data_list, list(response$response$docs))
num <- response$response$numFound
numb_list <- c(numb_list, ifelse(length(num)==0, NA, num))
}
length(data_list)
length(numb_list)
numb_list
iati_id
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:("GB-GOV-1-301290")',
'&rows=100',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
numb_data
new_data
data_list[[1]]
data_list[[2]]
iati_id[[1]]
iati_id[1]
data_list[1]
make_qstring(iati_id)
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
make_qstring(iati_id),
'&rows=1000',
'&wt=json',
"&fl=iati_identifier,document_link_url")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
View(new_data)
is.null(new_data$document_link_url)
sapply(new_data$document_link_url, is.null)
!sapply(new_data$document_link_url, is.null)
data_lines <- !sapply(new_data$document_link_url, is.null)
new_data[data_lines,]
new_data_lines <- new_data[data_lines,]
View(new_data_lines)
iati_id
new_data_lines[1,2]
new_data_lines[1,2][6]
new_data_lines[1,2][[1]][6]
sapply(new_data_lines[,2], function(x){
length(x[[1]])
})
sapply(new_data_lines[,2], function(x){
length(unlist(x))
})
numb_url <-
sapply(new_data_lines[,2], function(x){
length(unlist(x))
})
prefix_id <- rep(new_data_lines[,1], numb_url)
urls <- unlist(c(new_data_lines$document_link_url))
urls
for(i in 1:length(urls[1:2])){
download.file(urls[i], destfile = paste0(pathforurl,prefix_id[i],basename(urls[i])))
}
for(i in 1:length(urls[1:2])){
download.file(urls[i], destfile = paste0(pathforurl,prefix_id[i],'_',basename(urls[i])))
}
numb_url <-
sapply(new_data_lines[,2], function(x){
unlist(x)
})
View(numb_url)
# Define UK government department IATI org IDs
organisation_codes <- c("GB-GOV-1",  # FCDO
"GB-GOV-7",  # Defra
"GB-GOV-10", # DHSC
"GB-GOV-12", # DCMS
"GB-GOV-13", # BEIS
"GB-GOV-15", # DIT
"GB-GOV-50") # Prosperity Fund
org_country_lookup <- function(org_name) {
# Look up country from GRID database
country_lookup <- data.frame(name = str_to_lower(org_name)) %>%
# Join on GRID database
left_join(grid_institutes, by = "name") %>%
left_join(grid_addresses, by = "grid_id") %>%
select(name, grid_country = country) %>%
# Extract any countries in name
mutate(name_country = str_extract_all(name, countries_string)) %>%
unnest(cols = name_country, keep_empty = TRUE) %>%
# Coalesce country results
mutate(final_country = coalesce(grid_country, name_country))
result <- str_to_title((country_lookup$final_country)[1])
return(result)
}
extract_org_country <- function(org_id) {
path <- paste0("http://gtr.ukri.org/organisation/", org_id)
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
org_name <- ((response$organisationOverview)$organisation)$name
# Look up country from UKRI GtR
org_address <- ((response$organisationOverview)$organisation)$address
if("country" %in% names(org_address)) {
org_country_ukri <- org_address$country
} else {
org_country_ukri <- "Unknown"
}
# If unknown use other generic lookup function
if(org_country_ukri == "Unknown") {
org_country <- org_country_lookup(org_name)
} else {
org_country <- org_country_ukri
}
return(org_country)
}
# Function to match IATI country code to name
country_code_to_name <- function(country_code) {
# check if input is a valid 2-digit country code
if(is.na(country_code) | nchar(country_code) < 2) { country_name <- NA }
else {
path <- paste0("https://datastore.iati.cloud/api/v2/countries/?code=", country_code, "&format=json")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- (fromJSON(response, flatten = TRUE))$results
# Check whether a name has been found
if(length(response) > 0) {
country_name <- response$name
} else {
country_name <- NA
}
}
return(country_name)
}
# Extract 5-digit OECD sector codes
sector_list <- read.csv("https://iatistandard.org/reference_downloads/203/codelists/downloads/clv3/csv/en/Sector.csv")
# Function to extract IATI activity info from activity ID
iati_activity_extract <- function(activity_id) {
# Reformat ID if it contains spaces (for API)
activity_id <- str_replace_all(activity_id, " ", "%20")
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:"',
activity_id,
'"&wt=json',
"&fl=other_identifier,reporting_org,location,default_flow_type,activity_date,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity"
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
return(new_data)
}
# Read in linked partner IATI activity info from script 1
ri_linked_activites <- readRDS(file = "Outputs/ri_linked_activites.rds")
View(ri_linked_activites)
# Manually add on other (non-linked) partner activities from Excel
partner_iati_activity_ids <- unlinked_partner_iati_activity_ids %>%
plyr::rbind.fill(ri_linked_activites)
org_activity_extract <- function(page, org_code, org_activity_list) {
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:"',
org_code,
'"&wt=json',
"&fl=iati_identifier,other_identifier,activity_date,reporting_org,sector_code,location,default_flow_type,budget,policy_marker,activity_status,hierarchy,title,description,participating_org,related_activity,tag&page=", page)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
# Ensure "default flow type" field exists for joining datasets
if("default_flow_type.name" %in% names(new_data)) {
new_data <- new_data %>%
mutate(default_flow_type = default_flow_type.name) %>%
select(-default_flow_type.name, -default_flow_type.code)
}
results <- rbind(org_activity_list, new_data)
return(results)
}
# Define UK government department IATI org IDs
organisation_codes <- c("GB-GOV-1",  # FCDO
"GB-GOV-7",  # Defra
"GB-GOV-10", # DHSC
"GB-GOV-12", # DCMS
"GB-GOV-13", # BEIS
"GB-GOV-15", # DIT
"GB-GOV-50") # Prosperity Fund
# Prepare output data frame
uk_gov_list_final <- data.frame()
# Extract activity data for each government department
for (org in organisation_codes) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(org, "-", page))
x <- nrow(uk_gov_list_final)
uk_gov_list_final <- org_activity_extract(page, org, uk_gov_list_final)
page <- page + 1
y <- nrow(uk_gov_list_final)
new_rows = y - x
}
}
View(uk_gov_list_final)
uk_gov_list_final <- readRDS("~/Git/ODA_research_and_innovation/Outputs/uk_gov_list_final.rds")
uk_gov_list_final <- data.frame()
# Extract activity data for each government department
for (org in organisation_codes) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(org, "-", page))
x <- nrow(uk_gov_list_final)
uk_gov_list_final <- org_activity_extract(page, org, uk_gov_list_final)
page <- page + 1
y <- nrow(uk_gov_list_final)
new_rows = y - x
}
}
View(uk_gov_list_final)
# 1 - Function to extract project IDs by fund name (GCRF/Newton)
extract_ukri_projects_by_fund <- function(page, fund) {
path <- paste0("https://gtr.ukri.org:443/gtr/api/projects?q=",
fund, "&f=pro.rcukp&p=", page, "&s=100")
request <- GET(url = path)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
projects <- response$project
return(projects)
}
uk_gov_list_filtered <- uk_gov_list_final %>%
select(-tag) %>%
left_join(ri_iati_activities, by = "iati_identifier") %>%
filter((reporting_org.ref %in% c("GB-GOV-7", "GB-GOV-10", "GB-GOV-15", "GB-GOV-50") | # Include everything from these gov departments
str_detect(iati_identifier, "GB-GOV-3") |                               # Include everything ex-FCDO
!is.na(tag) |                                                           # Include tagged R&I programmes
str_detect(iati_identifier, "NEWT|Newton|NF|GCRF|NIHR|GAMRIF|UKVN")),   # Include BEIS Newton/GCRF and DHSC GHS/GHR activities
default_flow_type == "ODA")                                             # Restrict to ODA funding only
uk_gov_ri_programmes <- uk_gov_list_final %>%
filter(lengths(tag) != 0) %>%
unnest(col = tag) %>%
select(-narrative, -vocabulary_uri, -vocabulary.code, -vocabulary.name)
# Save list of tagged research & innovation activities
ri_iati_activities <- uk_gov_ri_programmes %>%
filter(code == "RI") %>%
select(iati_identifier) %>%
unique() %>%
mutate(tag = "RI")
packages <- data.frame(installed.packages())
if (!("jsonlite" %in% packages$Package)) {
install.packages("jsonlite")
}
if (!("httr" %in% packages$Package)) {
install.packages("httr")
}
if (!("tidyverse" %in% packages$Package)) {
install.packages("tidyverse")
}
if (!("dplyr" %in% packages$Package)) {
install.packages("dplyr")
}
if (!("readxl" %in% packages$Package)) {
install.packages("readxl")
}
if (!("writexl" %in% packages$Package)) {
install.packages("writexl")
}
if (!("googlesheets4" %in% packages$Package)) {
install.packages("googlesheets4")
}
if (!("gargle" %in% packages$Package)) {
install.packages("gargle")
}
if (!("openxlsx" %in% packages$Package)) {
install.packages("openxlsx")
} # for adding hyperlinks and formatting to output Excel reports
if (!("DBI" %in% packages$Package)) {
install.packages("DBI")
} # for read/writing to Excel database
if (!("odbc" %in% packages$Package)) {
install.packages("odbc")
}
if (!("countrycode" %in% packages$Package)) {
install.packages("countrycode")
}
if (!("testthat" %in% packages$Package)) {
install.packages("testthat")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(dplyr)
library(readxl)
library(writexl)
library(googlesheets4)
library(gargle)
library(openxlsx)
library(DBI)
library(odbc)
library(countrycode)
library(testthat)
if (!("jsonlite" %in% packages$Package)) {
install.packages("jsonlite")
}
if (!("httr" %in% packages$Package)) {
install.packages("httr")
}
if (!("tidyverse" %in% packages$Package)) {
install.packages("tidyverse")
}
if (!("dplyr" %in% packages$Package)) {
install.packages("dplyr")
}
if (!("readxl" %in% packages$Package)) {
install.packages("readxl")
}
if (!("writexl" %in% packages$Package)) {
install.packages("writexl")
}
if (!("googlesheets4" %in% packages$Package)) {
install.packages("googlesheets4")
}
if (!("gargle" %in% packages$Package)) {
install.packages("gargle")
}
if (!("openxlsx" %in% packages$Package)) {
install.packages("openxlsx")
} # for adding hyperlinks and formatting to output Excel reports
if (!("DBI" %in% packages$Package)) {
install.packages("DBI")
} # for read/writing to Excel database
if (!("odbc" %in% packages$Package)) {
install.packages("odbc")
}
if (!("countrycode" %in% packages$Package)) {
install.packages("countrycode")
}
if (!("testthat" %in% packages$Package)) {
install.packages("testthat")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(dplyr)
library(readxl)
library(writexl)
library(googlesheets4)
library(gargle)
library(openxlsx)
library(DBI)
library(odbc)
library(countrycode)
library(testthat)
